@inject ChatService chatService
@inject IMemoryCache cache
@inject IJSRuntime js
@inject DataService dataService

<section class="content">
    <div style="margin-top:10px;height:610px;" class="box-body table-responsive">
        <table class="table table-bordered TableList">
            <tbody>
                @for (var i = 0; i < DbKms.record.Count; i++)
                {
                    <tr>
                        <td align="right">
                            <div style="background-color: #6CC2CC;border-radius: 5%;float:right;padding:5px;margin-left:10px;">
                                用户
                            </div>
                            <div style="background-color: #efefef;border-radius: 1%;float:right;padding:5px;" title="@DbKms.record[i].GetValue("VectorContent")">
                                @(new MarkupString(DbKms.record[i].GetValue("Request").ToStr().Replace("\n", "<br>")))
                            </div>
                        </td>
                    </tr>
                    <tr>
                        <td align="left">
                            <div style="background-color: #6CC2CC;border-radius: 5%;float:left;padding:5px;margin-right:10px;">
                                @DbKms.record[i].GetValue("model")
                            </div><br />
                            <div style="background-color: #efefef;border-radius: 1%;clear:both;float:left;padding:5px;margin:10px 0px 0px 20px;">
                                @(new MarkupString(DbKms.record[i].GetValue("Response").ToStr().Replace("\n", "<br>")))
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    <div style="height:150px;margin:10px;float:left;width:95%;">
        <div><textarea @bind="message" class="form-control" rows="4" style="resize:none;" autocomplete="off"></textarea></div>
        <div style="float:left;margin-top:10px;">            
           <div>
                <select class="form-control" style="width:90px;float:left;margin-right:10px;" @onchange="SelectDbChange">
                    <option value="">请选择</option>
                    @foreach (var item in AppSetting.DataConfig)
                    {
                        if (Data.dbInfo.key == item.key)
                        {
                            <option value="@item.key" selected="selected">@item.key</option>
                        }
                        else
                        {
                            <option value="@item.key">@item.key</option>
                        }
                    }
                </select>        
                <select class="form-control" @onchange="TypeChanage" id="typeSelect" style="width:90px;float:left;margin-right:10px;">
                    @if (!Data.dbInfo.isView)
                    {
                        <option value="1" selected="selected">表</option>
                        <option value="2">视图</option>
                    }
                    else
                    {
                        <option value="1">表</option>
                        <option value="2" selected="selected">视图</option>                            
                    }
                </select>
                <div id="kmsBusinessId" style="float:left;width: 490px;"></div>
           </div>
        </div>
        <div style="padding-top:10px;float:left;padding-left:10px;">
            <button class="btn btn-primary btn-sm" @onclick="SendAsync">发送</button>
            <button onclick="FnClose()" class="btn btn-primary btn-sm" style="margin-left:10px;">关闭</button>
        </div>
    </div>
</section>
@code {
    private string message{ get; set; }

    [Parameter]
    public ChatInfo Data { get; set; } = new ChatInfo();

    [Parameter]
    public EventCallback<ChatInfo> DataChanged { get; set; }

    [Parameter]
    public DbKms DbKms { get; set; } = new DbKms();

    [Parameter]
    public EventCallback<DbKms> DbKmsChanged { get; set; }

    private async void SendAsync()
    {
        if(string.IsNullOrEmpty(message))
        {
            await js.InvokeVoidAsync("FnMsg", new object[] { "请输入内容不能为空" });
            return;
        }

        await js.InvokeVoidAsync("FnGetSelect", new object[] { "GetBusinessValue" });

        if (Data.dbInfo.tableName.Count==0)
        {
            await js.InvokeVoidAsync("FnMsg", new object[] { "请选择数据对象" });
            return;
        }

        if (string.IsNullOrEmpty(Data.chatIndex))
        {
            var title = $"{message}（{string.Join('，', Data.kms.Select(a => a.name))}）";
            await js.InvokeVoidAsync("FnChatTitle", new object[] { title });
        }

        await js.InvokeVoidAsync("FnLoading", new object[] { });
        await js.InvokeVoidAsync("FnBusinessChat", new object[] { string.Empty });
        await js.InvokeVoidAsync("FnSelect", new object[] { "kmsBusinessId", SelectBusinessData() });

        Data.chatIndex = Data.chatIndex ?? $"chat-{Guid.NewGuid().ToStr()}";
        chatService.NL2Sql(message, Data.dbInfo, Data.chatIndex);
        await js.InvokeVoidAsync("FnMsg", new object[] { "回复成功" });
        DbKms.record = chatService.GetChatRecord(Data).List;

        message = string.Empty;
        StateHasChanged();
    }

    private async void SelectDbChange(ChangeEventArgs e)
    {
        Data.dbInfo.isView = false;
        Data.dbInfo.key = e.Value.ToStr();
        DbKms.tableList = DataService.TableList(Data.dbInfo.key, 1, 999).List;
        await js.InvokeVoidAsync("FnSelect", new object[] { "kmsBusinessId", SelectBusinessData() });
        StateHasChanged();
    }

    private async void TypeChanage(ChangeEventArgs e)
    {
        Data.dbInfo.isView = e.Value.ToStr() == "1" ? false : true;
        await js.InvokeVoidAsync("FnSelect", new object[] { "kmsBusinessId", SelectBusinessData() });
        StateHasChanged();
    }

    private List<Dictionary<string, object>> SelectBusinessData()
    {
        var data = new List<Dictionary<string, object>>();

        if (string.IsNullOrEmpty(Data.dbInfo.key))
            return data;

        var tableList = new List<Dictionary<string, object>>();
        if (Data.dbInfo.isView)
            tableList = DataService.ViewList(Data.dbInfo.key, 1, 999).List;
        if (!Data.dbInfo.isView)
            tableList = DataService.TableList(Data.dbInfo.key, 1, 999).List;

        foreach (var item in tableList)
        {
            var dic = new Dictionary<string, object>();
            if (Data.dbInfo.tableName.Exists(b => b == item.GetValue("tabName").ToStr()))
            {
                dic.Add("name", $"{item.GetValue("tabName").ToStr()}-{item.GetValue("tabComments").ToStr()}");
                dic.Add("value", item.GetValue("tabName").ToStr());
                dic.Add("selected", true);
                dic.Add("disabled", true);
            }
            else if (string.IsNullOrEmpty(Data.name))
            {
                dic.Add("name", $"{item.GetValue("tabName").ToStr()}-{item.GetValue("tabComments").ToStr()}");
                dic.Add("value", item.GetValue("tabName").ToStr());
            }
            else
            {
                dic.Add("name", $"{item.GetValue("tabName").ToStr()}-{item.GetValue("tabComments").ToStr()}");
                dic.Add("value", item.GetValue("tabName").ToStr());
                dic.Add("disabled", true);
            }
            data.Add(dic);
        }
        return data;
    }

    protected override bool ShouldRender()
    {
        if (string.IsNullOrEmpty(Data.chatIndex))
            DbKms.record = new List<Dictionary<string, object>>();

        return base.ShouldRender();
    }
}