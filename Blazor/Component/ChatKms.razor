@inject ChatService chatService
@inject IMemoryCache cache
@inject IJSRuntime js

<section class="content">
    <div style="margin-top:10px;height:610px;" class="box-body table-responsive">
        <table class="table table-bordered TableList">
            <tbody>
                @for (var i = 0; i < record.Count; i++)
                {
                    <tr>
                        <td align="right">
                            <div style="background-color: #6CC2CC;border-radius: 5%;float:right;padding:5px;margin-left:10px;">
                                用户
                            </div>
                            <div style="background-color: #efefef;border-radius: 1%;float:right;padding:5px;" title="@record[i].GetValue("VectorContent")">
                                @(new MarkupString(record[i].GetValue("Request").ToStr().Replace("\n", "<br>")))
                            </div>
                        </td>
                    </tr>
                    <tr>
                        <td align="left">
                            <div style="background-color: #6CC2CC;border-radius: 5%;float:left;padding:5px;margin-right:10px;">
                                @record[i].GetValue("model")
                            </div><br />
                            <div style="background-color: #efefef;border-radius: 1%;clear:both;float:left;padding:5px;margin:10px 0px 0px 20px;">
                                @(new MarkupString(record[i].GetValue("Response").ToStr().Replace("\n", "<br>")))
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    <div style="height:150px;margin:10px;float:left;width:95%;">
        <div><textarea @bind="message" class="form-control" rows="4" style="resize:none;" autocomplete="off"></textarea></div>
        <div style="float:left;margin-top:10px;">            
           <div> 
               <label style="margin-top:8px;float:left;">知识库</label>
               <div id="kmsId" style="float:left;width: 640px;margin-left:10px;"></div>
           </div>
        </div>
        <div style="padding-top:15px;float:left;padding-left:10px;">
            <button class="btn btn-primary btn-sm" @onclick="SendAsync">发送</button>
            <button onclick="FnClose()" class="btn btn-primary btn-sm" style="margin-left:10px;">关闭</button>
        </div>
    </div>
</section>
@code {
    private string message{ get; set; }

    [Parameter]
    public ChatInfo Data { get; set; } = new ChatInfo();

    [Parameter]
    public EventCallback<ChatInfo> DataChanged { get; set; }

    private List<KmsModel> kmsModels{ get; set; }

    [Parameter]
    public List<Dictionary<string, object>> record { get; set; }=new List<Dictionary<string, object>>();

    private async void SendAsync()
    {
        if(string.IsNullOrEmpty(message))
        {
            await js.InvokeVoidAsync("FnMsg", new object[] { "请输入内容不能为空" });
            return;
        }

        await js.InvokeVoidAsync("FnGetSelect", new object[] { "GetKmsValue" });
        if (string.IsNullOrEmpty(Data.chatIndex))
        {
            var title = $"{message}（{string.Join('，', Data.kms.Select(a => a.name))}）";
            await js.InvokeVoidAsync("FnChatTitle", new object[] { title });
        }
        await js.InvokeVoidAsync("FnLoading", new object[] { });
        await js.InvokeVoidAsync("FnSelect", new object[] { "kmsId", SelectKmsData() });

        Data.chatIndex = Data.chatIndex ?? $"chat-{Guid.NewGuid().ToStr()}";
        chatService.Chat(message, Data.kms, Data.chatIndex);
        await js.InvokeVoidAsync("FnMsg", new object[] { "回复成功" });
        record = chatService.GetChatRecord(Data).List;

        message = string.Empty;
        StateHasChanged();
    }

    protected override bool ShouldRender()
    {
        if (string.IsNullOrEmpty(Data.chatIndex))
            record = new List<Dictionary<string, object>>();

        return base.ShouldRender();
    }

    private List<Dictionary<string, object>> SelectKmsData()
    {
        var data = new List<Dictionary<string, object>>();
        foreach (var kms in KmsService.GetKmsList().FindAll(a => !a.isNL2Sql))
        {
            var dic = new Dictionary<string, object>();
            if (Data.kms.Exists(b => b.vectorIndex == kms.vectorIndex))
            {
                dic.Add("name", kms.name);
                dic.Add("value", kms.vectorIndex);
                dic.Add("selected", true);
                dic.Add("disabled", true);
            }
            else
            {
                dic.Add("name", kms.name);
                dic.Add("value", kms.vectorIndex);
                dic.Add("disabled", true);
            }
            data.Add(dic);
        }
        return data;
    }
}