@inject IJSRuntime js
@inject VectorService vectorService
@inject ImpService impService

<table id="" class="table table-bordered TableList">
    <tbody>
        <tr>
            <td align="right" width="10%" valign="middle"><label>名称：</label></td>
            <td>
                <input type="text" @bind="@Model.Name" class="form-control" />
            </td>
        </tr>
        <tr>
            <td align="right" width="10%" valign="middle"><label>备注：</label></td>
            <td>
                <textarea @bind="@Model.Remark" class="form-control" rows="4"></textarea>
            </td>
        </tr>
        <tr>
            <td align="right" width="10%" valign="middle"><label>文件：</label></td>
            <td>
                <InputFile onchange="UploadFile" class="form-control" accept=".xls,.txt,.json,.xlsx,.pdf,.doc,.docx,.jpeg,.png,.jpg,.bmp,.tiff" />
            </td>
        </tr>
        <tr>
            <td align="center" colspan="2">
                <button @onclick="SubmitAsync" class="btn btn-primary">提交</button>
            </td>
        </tr>
    </tbody>
</table>

@code {
    public KmsModel Model { get; set; } = new KmsModel();

    private IBrowserFile file { get; set; }

    private async void SubmitAsync()
    {
        if (file == null)
        {
            await js.InvokeVoidAsync("FnMsg", new object[] { "导入失败：请选择要上传的文件" });
            return;
        }

        await js.InvokeVoidAsync("FnLoading", new object[] { });

        var data = new Dictionary<string, object>();

        if (file.Name.EndsWith(".xls") || file.Name.EndsWith(".xlsx"))
            data = await impService.ExcelAsync(file);
        else if (file.Name.EndsWith(".doc") || file.Name.EndsWith(".docx"))
            data = await impService.WordAsync(file);
        else if (file.Name.EndsWith(".txt") || file.Name.EndsWith(".json"))
            data = await impService.TextAync(file);
        else if (file.Name.EndsWith(".pdf"))
            data = await impService.PdfAsync(file);
        else if (file.Name.EndsWith(".jpeg") || file.Name.EndsWith(".jpg") || file.Name.EndsWith(".png")
                     || file.Name.EndsWith(".bmp") || file.Name.EndsWith(".tiff"))
            data = await impService.ImageAsync(file);
        else
        {
            await js.InvokeVoidAsync("FnMsg", new object[] { "导入失败：目前只支持.xls,.txt,.json,.xlsx,.pdf,.doc,.docx,.jpeg,.png,.jpg,.bmp,.tiff文件" });
            return;
        }

        if (data.Count > 0)
        {
            var kmsModel = new KmsModel
                {
                    DateTime = DateTime.Now,
                    Index = Guid.NewGuid().ToStr(),
                    Name = Model.Name ?? file.Name,
                    Remark = Model.Remark ?? file.Name
                };

            var field = new Dictionary<string, object>();
            field.Add("text", "text");

            var result = vectorService.CreateVector(kmsModel,
                new VectorModel
                    {
                        Name = Model.Name ?? file.Name,
                        Id = Guid.NewGuid().ToStr()
                    });

            if (!result.IsSuccess)
                await js.InvokeVoidAsync("FnMsg", new object[] { "导入失败：" + result.Exception.Message });

            var llm = vectorService.AddVectorData(data, kmsModel);

            if (llm.IsSuccess)
            {
                await js.InvokeVoidAsync("FnMsg", new object[] { "导入成功" });
                await js.InvokeVoidAsync("FnReLoad", new object[] { });
            }
            else
                await js.InvokeVoidAsync("FnMsg", new object[] { "导入失败：" + llm.Exception.Message });
        }
        else
            await js.InvokeVoidAsync("FnMsg", new object[] { "导入失败：未读取到数据" });
    }

    private void UploadFile(InputFileChangeEventArgs e)
    {
        file = e.GetMultipleFiles()[0];
    }
}
