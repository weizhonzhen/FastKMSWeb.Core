@inject ChatService chatService
@inject IMemoryCache cache
@inject IJSRuntime js
@inject DataService dataService

<section class="content">
    <div style="margin-top:10px;height:610px;" class="box-body table-responsive">
        <table class="table table-bordered TableList">
            <tbody>
                @for (var i = 0; i < DbKms.Record.Count; i++)
                {
                    <tr>
                        <td align="right">
                            <div style="background-color: #6CC2CC;border-radius: 5%;float:right;padding:5px;margin-left:10px;">
                                用户
                            </div>
                            <div style="background-color: #efefef;border-radius: 1%;float:right;padding:5px;" title="@DbKms.Record[i].GetValue("VectorContent")">
                                @(new MarkupString(DbKms.Record[i].GetValue("Request").ToStr().Replace("\n", "<br>")))
                            </div>
                        </td>
                    </tr>
                    <tr>
                        <td align="left">
                            <div style="background-color: #6CC2CC;border-radius: 5%;float:left;padding:5px;margin-right:10px;">
                                @DbKms.Record[i].GetValue("model")
                            </div><br />
                            <div style="background-color: #efefef;border-radius: 1%;clear:both;float:left;padding:5px;margin:10px 0px 0px 20px;">
                                @(new MarkupString(DbKms.Record[i].GetValue("Response").ToStr().Replace("\n", "<br>")))
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    <div style="height:150px;margin:10px;float:left;width:95%;">
        <div><textarea @bind="message" class="form-control" rows="2" style="resize:none;"></textarea></div>
        <div style="float:left;margin-top:10px;width:90%;">            
           <div>
                <select class="form-control" style="width:160px;float:left;margin-right:10px;" @onchange="SelectDbChange">
                    <option value="">请选择</option>
                    @foreach (var item in AppSetting.DataConfig)
                    {
                        if (DbKms.Key == item.Key)
                        {
                            <option value="@item.Key" selected="selected">@item.Key</option>
                        }
                        else
                        {
                            <option value="@item.Key">@item.Key</option>
                        }
                    }
                </select>
                <select class="form-control" style="width:500px;" @onchange="SelectTableChange">
                    <option value="">请选择</option>
                    @foreach (var item in DbKms.TableList)
                    {
                        if (@item.GetValue("tabName").ToStr() == DbKms.TableName)
                        {
                            <option value="@item.GetValue("tabName")" selected="selected">@($"{item.GetValue("tabName")}-{item.GetValue("tabComments")}")</option>
                        }
                        else
                        {
                            <option value="@item.GetValue("tabName")">@($"{item.GetValue("tabName")}-{item.GetValue("tabComments")}")</option>
                        }
                    }
                </select>
           </div>
        </div>
        <div style="padding-top:10px;float:right;padding-left:10px;">
            <button class="btn btn-primary btn-sm" @onclick="SendAsync">发送</button>
        </div>
    </div>
</section>
@code {
    private string message{ get; set; }

    [Parameter]
    public ChatInfo Data { get; set; } = new ChatInfo();

    [Parameter]
    public EventCallback<ChatInfo> DataChanged { get; set; }

    [Parameter]
    public DbKms DbKms { get; set; } = new DbKms();

    [Parameter]
    public EventCallback<DbKms> DbKmsChanged { get; set; }

    private async void SendAsync()
    {
        if(string.IsNullOrEmpty(message))
        {
            await js.InvokeVoidAsync("FnMsg", new object[] { "请输入内容不能为空" });
            return;
        }

        if (string.IsNullOrEmpty(Data.ChatIndex))
        {
            var title = $"{message}（{string.Join('，', Data.Kms.Select(a => a.Name))}）";
            await js.InvokeVoidAsync("FnChatTitle", new object[] { title });
        }

        await js.InvokeVoidAsync("FnLoading", new object[] { });

        Data.ChatIndex = Data.ChatIndex ?? $"chat-{Guid.NewGuid().ToStr()}";
        chatService.NL2Sql(message, DbKms.Key, DbKms.TableName, Data.ChatIndex);
        await js.InvokeVoidAsync("FnMsg", new object[] { "回复成功" });
        DbKms.Record = chatService.GetChatRecord(Data).List;

        message = string.Empty;
        StateHasChanged();
    }

    private void SelectDbChange(ChangeEventArgs e)
    {
        DbKms.Key = e.Value.ToStr();
        DbKms.TableList = dataService.TableList(DbKms.Key, 1, 999).List;
        StateHasChanged();
    }

    private void SelectTableChange(ChangeEventArgs e)
    {
        var kms = new KmsModel();
        kms.IsNL2Sql = true;
        kms.Name = e.Value.ToStr();
        kms.DateTime = DateTime.Now;

        Data.Kms.Clear();
        Data.Kms.Add(kms);
        DbKms.TableName = e.Value.ToStr();
    }

    protected override bool ShouldRender()
    {
        if (string.IsNullOrEmpty(Data.ChatIndex))
            DbKms.Record = new List<Dictionary<string, object>>();

        return base.ShouldRender();
    }
}