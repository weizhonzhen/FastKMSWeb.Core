@inject ChatService chatService
@inject KmsService kmsService
@inject IMemoryCache cache
@inject IJSRuntime js

<section class="content">
    <div style="margin-top:10px;height:650px;" class="box-body table-responsive">
        <table class="table table-bordered TableList">
            <tbody>
                @for (var i = 0; i < record.Count; i++)
                {
                    <tr>
                        <td align="right">
                            <div style="background-color: #6CC2CC;border-radius: 5%;float:right;padding:5px;margin-left:10px;">
                                用户
                            </div>
                            <div style="background-color: #efefef;border-radius: 1%;float:right;padding:5px;" title="@record[i].GetValue("VectorContent")">
                                @(new MarkupString(record[i].GetValue("Request").ToStr().Replace("\n", "<br>")))
                            </div>
                        </td>
                    </tr>
                    <tr>
                        <td align="left">
                            <div style="background-color: #6CC2CC;border-radius: 5%;float:left;padding:5px;margin-right:10px;">
                                @record[i].GetValue("model")
                            </div><br />
                            <div style="background-color: #efefef;border-radius: 1%;clear:both;float:left;padding:5px;margin:10px 0px 0px 20px;">
                                @(new MarkupString(record[i].GetValue("Response").ToStr().Replace("\n", "<br>")))
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    <div style="height:100px;margin:10px;float:left;width:95%;">
        <div><textarea @bind="message" class="form-control" rows="2" style="resize:none;"></textarea></div>
        <div style="float:left;margin-top:10px;">
            <lable style="margin-top:5px;color:green;">知识库：</lable>
            @foreach (var kms in kmsService.GetKmsList())
            {
                <label class="checkbox-inline">
                    @if (Data.Kms.Exists(b => b.VectorIndex == kms.VectorIndex) && !string.IsNullOrEmpty(Data.Name))
                    {
                        <input type="checkbox" value="@kms._id" disabled checked="checked"/> @kms.Name
                    }
                    else if(string.IsNullOrEmpty(Data.Name))
                    {
                        <input type="checkbox" value="@kms._id" @onchange="e => UpdateSelected(kms, (bool)e.Value)" /> @kms.Name
                    }
                    else
                    {
                        <input type="checkbox" value="@kms._id" disabled/> @kms.Name
                    }
                </label>
            }
        </div>
        <div style="padding-top:10px;float:right;padding-left:10px;">
            <button class="btn btn-primary btn-sm" @onclick="SendAsync">发送</button>
        </div>
    </div>
</section>
@code {
    private string message{ get; set; }
    private bool isChangeKms { get; set; } = true;

    [Parameter]
    public ChatInfo Data { get; set; } = new ChatInfo();

    [Parameter]
    public EventCallback<ChatInfo> DataChanged { get; set; }

    private List<KmsModel> kmsModels{ get; set; }

    public List<Dictionary<string, object>> record { get; set; }=new List<Dictionary<string, object>>();

    protected override void OnParametersSet()
    {
        var isShow = false;
        cache.TryGetValue("IsChatShow", out isShow);
        if (isShow)
        {
            var title = $"{Data.Name}（{string.Join('，', Data.Kms.Select(a => a.Name))}）";
            js.InvokeVoidAsync("FnChat", new object[] { title });
            cache.Set("IsChatShow", false);

            if (!string.IsNullOrEmpty(Data.ChatIndex))
                record = chatService.GetChatRecord(Data).List;
            else
                record = new List<Dictionary<string, object>>();
        }

        base.OnParametersSet();
    }

    private async void SendAsync()
    {
        if(string.IsNullOrEmpty(message))
        {
            await js.InvokeVoidAsync("FnMsg", new object[] { "请输入内容不能为空" });
            return;
        }

        if (string.IsNullOrEmpty(Data.ChatIndex))
        {
            var title = $"{message}（{string.Join('，', Data.Kms.Select(a => a.Name))}）";
            await js.InvokeVoidAsync("FnChatTitle", new object[] { title });
        }

        await js.InvokeVoidAsync("FnLoading", new object[] { });

        Data.ChatIndex = Data.ChatIndex ?? $"chat-{Guid.NewGuid().ToStr()}";
        chatService.Prompt(message, Data.Kms, Data.ChatIndex, record.Select(a => a.GetValue("Request").ToStr()).ToList());
        await js.InvokeVoidAsync("FnMsg", new object[] { "回复成功" });
        record = chatService.GetChatRecord(Data).List;

        isChangeKms = false;
        message = string.Empty;
        StateHasChanged();
    }

    protected override bool ShouldRender()
    {
        if (string.IsNullOrEmpty(Data.ChatIndex))
            record = new List<Dictionary<string, object>>();

        return base.ShouldRender();
    }

    private void UpdateSelected(KmsModel item, bool isChecked)
    {
        if (!isChangeKms)
            return;

        if (isChecked)
            Data.Kms.Add(item);
        else
            Data.Kms.Remove(item);
    }
}