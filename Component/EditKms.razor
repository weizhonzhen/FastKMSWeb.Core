@inject IJSRuntime js
@inject IMemoryCache cache
@inject VectorService vectorService

<table id="" class="table table-bordered TableList"> 
    <tbody> 
        <tr>  
            <td align="right" width="10%" valign="middle"><label>名称：</label></td> 
            <td>@Data.name</td>
        </tr>  
        <tr>  
            <td align="right" width="10%" valign="middle"><label>内容：</label></td> 
            <td>
                <InputTextArea @bind-Value="Data.text" class="form-control" rows="13" />
            </td> 
        </tr> 
        <tr> 
            <td align="center" colspan="2"> 
                <button @onclick="SubmitAsync" class="btn btn-primary">提交</button>
            </td> 
        </tr> 
    </tbody> 
</table> 

@code {
    [Parameter]
    public OptionModel Data { get; set; } = new OptionModel();

    [Parameter]
    public EventCallback<OptionModel> DataChanged { get; set; }

    protected override void OnParametersSet()
    {
        var isShow = false;
        cache.TryGetValue("IsShow", out isShow);
        if (isShow)
        {
            js.InvokeVoidAsync("FnEdit", new object[] { Data.name });
            cache.Set("IsShow", false);
        }

        base.OnParametersSet();
    }

    private async Task SubmitAsync()
    {
        await js.InvokeVoidAsync("FnLoading", new object[] { });
        var dic = JsonConvert.SerializeObject(Data).JsonToDic();
        vectorService.UpdateVectorItem(dic);
        await js.InvokeVoidAsync("FnMsg", new object[] { "修改成功" });
        await js.InvokeVoidAsync("FnReload", new object[] { });
    }
}