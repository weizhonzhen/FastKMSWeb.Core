@page "/chat"
@inject IJSRuntime js
@inject ChatService chatService
@inject IMemoryCache cache
@inject DataService dataService
<div class="form-inline">
    <div class="form-group">
        <div class="form-group">
            <button @onclick="ChatKmsAsync" class="btn btn-primary">对话知识库</button>
            <button @onclick="ChatBusinessAsync" class="btn btn-primary">对话数据库</button>
        </div>
    </div>
</div>
<section class="content">
    <div class="box-body table-responsive"> 
        <table id="kmsTable" class="table table-bordered TableList">
            <thead style="background-color:#cacaca;">
                <tr>
                    <td align="center" width="40%">对话名称</td>
                    <td align="center" width="15%">对话次数</td>
                    <td align="center" width="15%">对话时间</td>
                    <td align="center" width="15%">类型</td>
                    <td align="center" width="15%">操作</td>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in pageModel.PageResult.List)
                {
                    <tr>
                        <td align="center" width="40%">@item.GetValue("Name")</td>
                        <td align="center" width="15%">@item.GetValue("Total").ToStr().ToInt(0)</td>
                        <td align="center" width="15%">@item.GetValue("BeginTime")</td>
                        <td align="center" width="15%">@(item.GetValue("IsNL2Sql").ToBool() ? "数据库" : "知识库")</td>
                        <td align="center" width="15%">
                            <button class="btn btn-primary btn-sm" @onclick="()=>Option(item)">查看</button>
                            <button class="btn btn-primary btn-sm" @onclick="()=>DeleteAsync(item)">删除</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        <Page @bind-PageModel="pageModel" @bind-PageModel:event="pageModelChanged" PageEvent="()=>PageEvent(pageModel)" />
    </div>
</section>
<div style="display:none; overflow:hidden;" id="ChatKms">
    <ChatKms @bind-Data="Data" @bind-Data:event="DataChanged" record="chatRecord"/>
</div>
<div style="display:none; overflow:hidden;" id="ChatBusiness">
    <ChatBusiness @bind-Data="Data" @bind-Data:event="DataChanged" @bind-DbKms="DbKms" @bind-DbKms:event="DbKmsChanged" />
</div>
@code {
    private List<Dictionary<string, object>> chatRecord { get; set; } = new List<Dictionary<string, object>>();
    private static ChatInfo Data { get; set; } = new ChatInfo();
    private DbKms DbKms { get; set; } = new DbKms();
    private KmsPageModel pageModel { get; set; } = new KmsPageModel();
    protected override void OnInitialized()
    {
        pageModel.PageResult = chatService.GetPage(pageModel.PageId, pageModel.PageSize);
    }

    private void PageEvent(KmsPageModel pageModel)
    {
        pageModel.PageResult = chatService.GetPage(pageModel.PageId, pageModel.PageSize);
    }

    private async Task DeleteAsync(Dictionary<string, object> dic)
    {
        if (chatService.DeleteChat(dic).IsSuccess)
        {
            await js.InvokeVoidAsync("FnMsg", new object[] { "删除成功" });
            pageModel.PageResult = chatService.GetPage(pageModel.PageId, pageModel.PageSize);
            await js.InvokeVoidAsync("FnLoad", new object[] { });
        }
        else
            await js.InvokeVoidAsync("FnMsg", new object[] { "删除失败" });
    }

    private void Option(Dictionary<string, object> dic)
    {
        var ksmJson = dic.GetValue("Kms").ToStr();
        if (!string.IsNullOrEmpty(ksmJson))
            Data.Kms = JsonConvert.DeserializeObject<List<KmsModel>>(ksmJson);

        Data._id = dic.GetValue("_id").ToStr();
        Data._index = dic.GetValue("_index").ToStr();
        Data.BeginTime = dic.GetValue("BeginTime").ToStr().ToDate();
        Data.Total = dic.GetValue("Total").ToStr().ToInt(0);
        Data.ChatIndex = dic.GetValue("ChatIndex").ToStr();
        Data.Name = dic.GetValue("name").ToStr();
        Data.Db = JsonConvert.DeserializeObject<Dictionary<string, object>>(dic.GetValue("db").ToStr()) ?? new Dictionary<string, object>();

        if (!string.IsNullOrEmpty(Data.ChatIndex))
            chatRecord = chatService.GetChatRecord(Data).List;
        else
            chatRecord = new List<Dictionary<string, object>>();

        var title = $"{Data.Name}（{string.Join('，', Data.Kms.Select(a => a.Name))}）";
        if (!dic.GetValue("IsNL2Sql").ToBool())
        {
            js.InvokeVoidAsync("FnSelect", new object[] { SelectKmsData() });
            js.InvokeVoidAsync("FnKmsChat", new object[] { title });
        }
        else
        {
            if (Data.Db.Count > 0)
            {
                DbKms.Key = Data.Db.Keys.First();
                DbKms.TableName = Data.Db.Values.First().ToStr();
                DbKms.TableList = dataService.TableList(DbKms.Key, 1, 99).List;
                js.InvokeVoidAsync("FnBusinessSelect", new object[] { });
            }

            DbKms.Record = chatRecord;
            js.InvokeVoidAsync("FnBusinessChat", new object[] { title });            
        }
    }

    private async void ChatKmsAsync()
    {
        Data = new ChatInfo();
        Data.Kms = KmsService.GetKmsList();
        await js.InvokeVoidAsync("FnKmsChat", new object[] { string.Empty });
        await js.InvokeVoidAsync("FnSelect", new object[] { SelectKmsData() });
    }

    private async void ChatBusinessAsync()
    {
        Data = new ChatInfo();
        await js.InvokeVoidAsync("FnBusinessChat", new object[] { string.Empty });
    }

    private List<Dictionary<string, object>> SelectKmsData()
    {
        var data = new List<Dictionary<string, object>>();
        foreach (var kms in KmsService.GetKmsList().FindAll(a => !a.IsNL2Sql))
        {
            var dic = new Dictionary<string, object>();
            if (Data.Kms.Exists(b => b.VectorIndex == kms.VectorIndex) && !string.IsNullOrEmpty(Data.Name))
            {
                dic.Add("name", kms.Name);
                dic.Add("value", kms.VectorIndex);
                dic.Add("selected", true);
                dic.Add("disabled", true);
            }
            else if (string.IsNullOrEmpty(Data.Name))
            {
                dic.Add("name", kms.Name);
                dic.Add("value", kms.VectorIndex);
            }
            else
            {
                dic.Add("name", kms.Name);
                dic.Add("value", kms.VectorIndex);
                dic.Add("disabled", true);
            }
            data.Add(dic);
        }
        return data;
    }

    [JSInvokable]
    public static void GetKmsValue(List<Dictionary<string,object>> value)
    {
        if (value != null && value.Count > 0)
        {            
            var list = KmsService.GetKmsList().FindAll(a => !a.IsNL2Sql);
            Data.Kms = new List<KmsModel>();

            value.ForEach(a =>
            {
                var item = list.Find(b => b.VectorIndex == a.GetValue("value").ToStr());
                Data.Kms.Add(item);
            });
        }
        else
            Data.Kms = new List<KmsModel>();
    }
}

<script>
    var select = null;
    var index=0;
    $(function () {
        $("#kmsTable tbody tr").first().click();
        $.TableClickColor("kmsTable");
    });

    function FnLoad()
    {
        $("#kmsTable tbody tr").first().click();
        $.TableClickColor("kmsTable");
    }

    function PageNum(id) {
        $(".pagination li a").each(function () {
            if ($(this).attr("aria-label") == undefined)
                return;
            if ($(this).is(id))
                $(this).parent().addClass("active");
            else
                $(this).parent().removeClass("active");
        });
    }

    function FnMsg(msg)
    {
        layer.closeAll('loading')
        layer.msg(msg);
    }

    function FnReLoad()
    {
        window.location.reload();
    }

    function FnLoading()
    {
        layer.load(2);
    }

    function FnKmsChat(title)
    {
        index = layer.open({
            type: 1,
            area: ['850px', '850px'],
            fixed: true, maxmin: false,
            content:  $('#ChatKms'),
            title: "对话记录 - " + title,
            end: function () { FnReLoad(); }
        });
    }
        
    function FnBusinessChat(title)
    {
        index = layer.open({
            type: 1,
            area: ['850px', '850px'],
            fixed: true, maxmin: false,
            content:  $('#ChatBusiness'),
            title: "对话记录 - " + title,
            end: function () { FnReLoad(); }
        });
    }

    function FnChatTitle(title)
    {
        $("#layui-layer"+index+" .layui-layer-title").html("对话记录 - " +title);
    }

    function FnReload()
    {
        parent.layer.closeAll('iframe');
        window.location.reload();
    }

    function FnSelect(json)
    {
       select = xmSelect.render({ el: '#kmsId', data: json });
    }

    function FnGetSelect()
    {        
        DotNet.invokeMethodAsync("FastKMSWeb.Core","GetKmsValue",select.getValue());
    }

    function FnBusinessSelect()
    {
        $("#ChatBusiness select").attr("disabled","disabled");
    }
</script>